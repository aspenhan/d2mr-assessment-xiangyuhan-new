---
title: 'Level 1 Data Cleaning: Clean the mtcars dataset'

editor_options: 
  chunk_output_type: console

output: html

fig-width: 6
fig-asp: 0.618
fig-align: "center"

---

# Objective

The objective of this assignment is to practice cleaning and transforming a messy dataset using tidyverse functions. You will use skills like renaming and reordering columns, sorting rows, changing data types, mutating data, and using the stringr and forcats packages.

In this Level 1 Cleaning assignment, you will work with a simple dataset and focus on basic data cleaning tasks. Most tasks are outlined in the assignment script. You may want to review the [Data Cleaning Walkthrough](https://github.com/nrdowling/d2mr-assessment/tree/main/01_data-cleaning/00_cleaning-walkthrough) before you begin.

You may additionally or alternatively complete the [Level 2 Data Cleaning assignment](https://github.com/nrdowling/d2mr-assessment/tree/main/01_data-cleaning/01_cleaning-level-2). In Level 2, you will work with a more complex dataset and perform additional cleaning tasks with less direct instruction. The Level 2 assignment has more opportunities to demonstrating meeting course standards than this Level 1 assignment and is recommended for those who are already comfortable with the tasks in this assignment.

# Instructions

1. If you have not already done so, pull the latest changes from the `d2mr-assessment` repository to ensure you have the most up-to-date version of the assignment files. Confirm you are working in your fork of the repository.
2. Open `cleaning-level-1.qmd` in RStudio and follow the instructions in the Setup section below to load and inspect the (clean) `goal.mtcars` dataset. 
    - **Important:** The provided code makes a small modification to the original `mtcars` dataset to create a `goal.mtcars` dataset. You will use this goal dataset as a reference to clean the `messy-mtcars.csv` dataset, not the true original.
3. Follow the tasks described in the assignment script to clean the dataset and return it to its original state.
4. At several points in this document you will come across questions or non-coding exercises. Answer these questions in the text of this .qmd document, immediately below the question.
5. *Optional:* Continue to follow the instructions in the assignment script to clean the dataset above and beyond matching the original. 


### Tasks

**Reminder:** Your goal is to match `goal.mtcars` (created below), *not* the default `mtcars`.[^1]

[^1]: Why? The `mtcars` dataset includes models names as *row names* rather than as a variable/column. For the purposes of this cleaning exercise, it's more useful to treat model names as a variable.

1. **Renaming Columns:** Rename columns to match the original `mtcars` dataset column names.
2. **Reordering Columns:** Ensure the columns are in the correct order.
3. **Sorting Rows:** Sort the rows by `mpg` (miles per gallon) and then by `cyl` (number of cylinders).
4. **Changing Data Types:** Ensure `gear` and `carb` are factors and other columns are numeric.
5. **Mutating Data:** Create a new column `hp_per_cyl` calculated as `hp` (horsepower) divided by `cyl`.
6. **String Manipulation:** Use `stringr` to clean any unwanted spaces or characters in the `model` column.
7. **Handling Factors:** Use `forcats` to ensure the levels of `gear` are ordered as `3`, `4`, `5`.

# Setup

## Load libraries and set seed

```{r}
#| label: setup

library(tidyverse)
set.seed(1234)

#change working directory as needed
setwd("C:\\Users\\aspen\\MAPSS Coursework\\From Data to Manuscript in R\\mini-projects\\d2mr-assessment-xiangyuhan-new\\01_data-cleaning\\01_cleaning-level-1")

#Load packages for summary statistics and tables
library(texreg)
library(gt)
library(gtsummary)

#Load packages for regression and other statistical analysis
library(car)
library(estimatr)
library(lmtest)
library(fixest)
library(margins)
library(nnet)
library(sandwich)
```

```{css}
/*| label: center-figure-captions */

figcaption {
  margin: auto;
  text-align: center;
}

```

## Read in and inspect messy data

Read in and inspect the messy dataset `messy-mtcars.csv`.

```{r}
#| label: read-messy-data

### LEAVE THIS CHUNK AS-IS ###

# You *might* need to edit the filepath, but don't change anything else!

# Read in messy-mtcars.csv
messy.mtcars <- read_csv(
  ########################################
  "messy-mtcars.csv", ## <-- THIS IS THE ONLY THING IN THIS CHUNK YOU CAN CHANGE IF NECESSARY
  ########################################
  trim_ws = FALSE, name_repair = "minimal", col_types = cols(.default = col_character()))

# Inspect the data
head(messy.mtcars)

```

## Inspect the original mtcars dataset

```{r}
#| label: inspect-original-data

### LEAVE THIS CHUNK AS-IS ###

# Load the original mtcars dataset
data(mtcars)

# Create the "goal.mtcars" dataset
# Convert row names to a column called "model" (see note above about row names)
goal.mtcars <- mtcars %>%
  rownames_to_column(var = "model")

# Inspect the goal.mtcars dataset
head(goal.mtcars)

# Optionally inspect the original mtcars dataset to see what the row names vs column issue looks like
# head(mtcars)

head(mtcars)

```


QUESTIONS:

1. What are the differences between the messy dataset and the original mtcars dataset?

The column headers are different between the two datasets; the ones in the original are more abbrieviated.

The "dsip" column header in the messy dataset has been spelling-corrected to "disp" in the original, and has been shifted to between "cyl" and "hp".

There are three extra columns in the messy dataset, as the car model is treated as a column variable and not row headers, and the variables "wt + runif(n(), 2e-05, 2e-04)" and "hp_per_cyl" are missing from the original.

There are missing (i.e. NA) values in "cylinders" and "horsepower" in the messy dataset which are present in the original.

All data with decimals are presented in full in the messy dataset but has been rounded to 2 decimal places in the original.

The data type has been reformatted from character in the messy datset to tbl in the original.

The original and the goal dataset also differs in that the latter has the car model as a variable column rather than as row headers.


2. What are the main issues you need to address in cleaning?

To clarify, I will be cleaning the messy dataset to obtain the goal dataset (not the original) as per instructions.

I will retain the car model variable column, but remove the "wt + runif(n(), 2e-05, 2e-04)" and "hp_per_cyl" variable columns.

I will shift the "dsip" column to between "cylinders" and "horsepower".

I will rename all the column headers accordingly.

I will add the missing values under "cyl" and "hp".

I will round the data with decimals to 2 places.

I will change the data type from character to tbl.

# Clean the Dataset

## Create "clean" dataset

```{r}
#| label: make-cleaning-dataset

# Create a dataset to work with during the cleaning process called "clean.mtcars"

clean.mtcars <- messy.mtcars

```


## Clean columns/variables


```{r}
#| label: rename-columns

# Rename columns to match the original mtcars dataset

colnames(clean.mtcars)

clean.mtcars <- clean.mtcars %>%
  rename("mpg" ="mpg (Miles/Gallon)", "cyl" = "cylinders", "hp" = "horsepower", "gear" = "gearbox", "disp" = "dsip", "carb" = "carburetors") %>%
  column_to_rownames(var = " Car Model")

```

```{r}
#| label: reorder-columns

# Reorder columns to match the original mtcars dataset

clean.mtcars <- clean.mtcars %>%
  relocate(disp, .before = hp) %>%
  select(-"wt + runif(n(), 2e-05, 2e-04)", -"hp_per_cyl")

```

```{r}
#| label: correct-data-types

# Correct variable data types

head(clean.mtcars)
head(mtcars)

clean.mtcars <- clean.mtcars %>%
  mutate(mpg = as.double(mpg), cyl = as.double(cyl), disp = as.double(disp),
         hp = as.double(hp), drat = as.double(drat), wt = as.double(wt),
         qsec = as.double(qsec), vs = as.double(vs), am = as.double(am),
         gear = as.double(gear), carb = as.double(carb))

```

## Checkpoint 1

```{r}
#| label: checkpoint-1

# Inspect the current state of the dataset

# Use all.equal() to check if clean.mtcars matches goal.mtcars

?all.equal
all.equal(goal.mtcars, clean.mtcars)

```
Questions:

3. The current state of the dataset does not yet match the `goal.mtcars` dataset. Explain the issues that `all.equal()` flags.  Are there groups of issues that can be addressed together?

<!-- answer below -->

The comparison flags mismatches between all the column names because "clean.mtcars" has the car model as row names instead of a column variable as in "goal.mtcars", which shifts all subsequent variable columns right by one (i.e. "mpg" is compared against "model", "cyl" is compared against "mpg" and so on).
As a result, there is mismatch of data types between the row headers, which are characters in "clean.mtcars" and numeric in "goal.mtcars"   , and between the first column variable: "mpg" which is numeric in "clean.mtcars" and "model" which is a character in "goal.mtcars". It also throws a length mismatch between the datasets since "goal.mtcars" has one more column variable, and mean differences as the two datasets are not comparing the same underlying variables. between These issues can be addressed together by reverting the row names back to a column variable and changing the column header accordingly in "clean.mtcars". Additionally, the data must be rounded to 2 decimal places to reconcile the mean differences.

There are NA values in "clean.mtcars" but not "goal.mtcars", specifically in the "cyl" and "hp" columns, which also explains the lack of mean comparisons for those columns since the NA values stop mean computation by default. These can be addressed by filling in those missing values.


3. Install (if necessary) and load the `daff` package. In the code chunk below, use the `diff_data()` function to identify the differences between `clean.mtcars` and `goal.mtcars`. 

```{r}
#| label: diff-data

# Install and/or load the daff package if needed
# install.package("daff")
# library(daff)

# Use render_diff() and diff_data() to identify differences between clean.mtcars and goal.mtcars

# package installed on a different file 

library(daff)

?diff_data
clean.goal.diff <- diff_data(clean.mtcars, goal.mtcars)

?render_diff
render_diff(clean.goal.diff)

```

How is this method of identifying data discrepancies different from `all.equal()`? Which do you find more helpful at this point?

<!-- answer below -->

This method specifies and visualizes the changes required to get from “clean.mtcars” to “goal.mtcars”, such as what rows, columns, and data values need to be added, deleted, and modified, whereas all.equal() just explains the differences in words, so I find the former more useful in this case.

## Clean data values

Identifying specific value problems and cleaning them might take a little creativity at times! Use the troubleshooting/debugging workflows we've discussed to get as far as you can.

```{r}
#| label: remove-unwanted-spaces

# Remove unwanted whitespace in any columns required

# First changed the row names to a column variable

clean.mtcars <- clean.mtcars %>%
  rownames_to_column(var = "model") %>%
  mutate(across(where(is.character), str_squish))

```

```{r}
#| label: impute-missing-values

# Impute missing values for cyl and hp

clean.mtcars <- clean.mtcars %>%
  mutate(cyl = replace(cyl, is.na(cyl), c(8, 6)),
    hp = replace(hp, is.na(hp), c(95, 66, 91)))

which(is.na(clean.mtcars)) #to check if there are still any NA values

```

```{r}
#| label: round-numeric-values

# Round numeric values

clean.mtcars$disp <- round(clean.mtcars$disp, 1)
clean.mtcars$drat <- round(clean.mtcars$drat, 2)
clean.mtcars$qsec <- round(clean.mtcars$qsec, 2)

```

```{r}
#| label: fix-typos

# Fix typos in model names
## Hint: This can be completed with a 6-line mutate() statement

#see unique data entries under "model" to compare name differences
unique(clean.mtcars$model)
unique(goal.mtcars$model)

#Fix typos
clean.mtcars <- clean.mtcars %>%
  mutate(model = str_replace_all(model, "A", "a"),
         model = str_replace_all(model, "aMC Javelin", "AMC Javelin"),
         model = str_replace_all(model, "T0yota Corona", "Toyota Corona"),
         model = str_replace_all(model, "L0tus Europa", "Lotus Europa"))

#Not exactly 6 lines; not sure whether there is a more efficient way to do this

```

```{r}
#| label: remove-extra-column

# Remove the extra column

# I don't have an extra column.

```


## Checkpoint 2

```{r}
#| label: checkpoint-2

# Inspect the dataset and compare to goal.mtcars

# all.equal()

all.equal(goal.mtcars, clean.mtcars)

# daff

clean.goal.diff.2 <- diff_data(clean.mtcars, goal.mtcars)
render_diff(clean.goal.diff.2)

```

Questions:

5. Is your dataset identical to `goal.mtcars`? If not, what are the remaining issues? If there were any issues you could not resolve in code, describe a proposed solution in plain English.

<!-- answer below -->

Yes my cleaned dataset is identical to "goal.mtcars", although my steps to obtain it differed a little, as I transformed the row headers to a column variable which did not have a step dedicated to it in this exercise, and I did not have any extra columns to remove. Also, I am not sure if the way I fixed the typos was the most efficient one.


# Optional Cleaning Tasks

You can call it a day here, or continue with the optional cleaning tasks below. These tasks are a chance to challenge yourself and practice your skills further. They are also additional opportunities to demonstrate mastery of course standards! 


## Additional guided cleaning

*Optional:* Complete any number of the following tasks to further clean the dataset. Each task should be in its own code chunk with an appropriate label and clearly commented code:

1. Create a new factor column `mpg_category` that categorizes `mpg` into "low", "medium", and "high" based on the distribution of `mpg` values.
2. Create a new factor column `wt_category` that categorizes `wt` into "light", "medium", and "heavy" based on the distribution of `wt` values, then reverse the order of the levels.
3. Create a new column `mpg_per_cyl` that calculates `mpg` divided by `cyl`.
4. Filter the data to only include cars with automatic transmissions. (Hint: `?mtcars` will show you useful info.)
5. Identify which variable would be better suited as a logical variable, then convert it to logical.
6. Sort the dataset by `mpg_category` then reverse alphabetically by `model` (so that models with the same `mpg_category` are sorted Z to A).
7. Write the cleaned dataset as a csv file called `clean-mtcars.csv`, then read the csv back in maintaining the correct data types.

```{r}
#| label: Categorise-mpg

#Set mpg below 15 as "low", 15 to below 30 as medium, and 30 or above as high

clean.mtcars <- clean.mtcars %>%
  mutate(mpg_category = case_when(
    mpg < 15 ~ "low",
    mpg >= 15 & mpg < 30 ~ "medium",
    mpg >= 30 ~ "high"
  ))

#Set mpg_category to a factor variable and set level ascending from low to high

str(clean.mtcars) #to check variable types

clean.mtcars$mpg_category <- factor(clean.mtcars$mpg_category) %>%
  fct_relevel("low", "medium", "high")

#Sort data by mpg_category and then by model reverse alphabetically

clean.mtcars <- clean.mtcars %>%
  arrange(mpg_category, desc(model))

```

```{r}
#| label: Categorise-weight

#Set weight below 2 as light, 2 to below 4 as medium, and 4 and above as heavy

clean.mtcars <- clean.mtcars %>%
  mutate(wt_category = case_when(
    wt < 2 ~ "light",
    wt >= 2 & wt < 4 ~ "medium",
    wt >= 4 ~ "heavy")) 

#Set wt_category as factor and set level "ascending" from heavy to light

clean.mtcars$wt_category <- factor(clean.mtcars$wt_category) %>%
  fct_relevel("heavy", "medium", "light")

#Sort data by wt_category

clean.mtcars <- clean.mtcars %>%
  arrange(wt_category) #note that it sorts with heavy then medium then light due to order reversal

```

```{r}
#| label: Compute-mpg-per-cyl

clean.mtcars$mpg_per_cyl <- clean.mtcars$mpg/clean.mtcars$cyl

#Round the values to 2 dp

clean.mtcars$mpg_per_cyl <- round(clean.mtcars$mpg_per_cyl, 2)

```

```{r}
#| label: Filter-by-transmission

#Check information about the mtcars dataset

?mtcars

#"am" variable stands for transmission type, with 0 denoting automatic and 1 denoting manual

#Data containing only automatic transmissions

clean.mtcars.auto <- clean.mtcars %>%
  filter(am == 0)

#Data containing only manual transmissions

clean.mtcars.manual <- clean.mtcars %>%
  filter(am ==! 0)

```


```{r}
#| label: Convert-to-logical

?mtcars
str(clean.mtcars)

# Based on the dataframe description and existing variable values, vs which is engine shape and am which is transmission type are apt as logical variables, so false denotes V-shaped, and automatic for transmission

clean.mtcars <- clean.mtcars %>%
  mutate(vs = as.logical(vs), am = as.logical(am)) %>%
  rename(engine_straight = vs, transmission_manual = am)

```

```{r}
#| label: Export-cleaned-data

# Arrange based on weight category and then mpg category

clean.mtcars <- clean.mtcars %>%
  arrange(desc(wt_category), mpg_category)

# Export data

write.csv(clean.mtcars, "clean-mtcars.csv")

```


## Unguided cleaning and transformation

*Optional:* If you have the time and interest, continue transforming this dataset as you please. Create new columns based on the existing ones, reformat strings, try your hand at a regex replacement, summarize by groups (factor levels), visualize a simple relationship, or anything else you can think of. You can do this in addition to or instead of the suggested additional cleaning tasks above.

# Investigating the relationship between fuel efficiency and horsepower

## Prepare final dataset for analysis

```{r}
#| label: Unit-conversion-function

# Define function which can convert imperial to metric units; put distance as the first argument and weight as the second argument

imp_to_metric <- function(x, y) {
  if (missing(y)) {
    return(x * 1.60934)  # Convert miles to km
  } 
  if (missing(x)) {
    return(y * 0.453592) # Convert pounds to kg
  } 
  return(c(x * 1.60934, y * 0.453592))  # Convert both if neither is missing
}

```

```{r}
#| label: Read-final-data

# Convert dataset to metric units

mtcars.final <- clean.mtcars %>%
  mutate(mpg = imp_to_metric(mpg),
         mpg_per_cyl = imp_to_metric(mpg_per_cyl),
         wt = imp_to_metric(, wt)) %>%
  rename(kmpg = mpg, kmpg_category = mpg_category, kmpg_per_cyl = mpg_per_cyl, )

# This will be the finalised dataset for subsequent visualisation and analysis

# Alternatively, if we did the above cleaning in a document, we can read in the exported data file by running the command below; note we will need to reorder the factor levels and the arrangement of rows in the data
# read.csv("clean-mtcars.csv")

# Alternatively, if the cleaning was done in an R script, we can source the above R script using the command below, which will preserve all the cleaning steps
# source("name of R script file")

```

I have converted the dataset to be in metric units for distances and weights for subsequent analysis.

The variables in the dataset are `` `{r} colnames(mtcars.final) ` ``.

I am interested in the relationship between fuel efficiency (``kpmg``) and horsepower (``hp``), controlling for certain physical and design features, namely[^2]

* Weight (``wt``)
* Number of cylinders (``cyl``)
* Number of carburetors (``carb``)
* Transmission type (``transmission_manual``)

[^2]: I have restricted focus to selected car characteristics given the limited number of observations and these have most grounds a priori for affecting fuel efficiency and horsepower.

## Summary statistics

@fig-summary-stats shows some summary statistics of these variables of interest.

```{r}
#| label: fig-summary-stats
#| fig-cap: "**Summary statistics of car characteristics**"

sum_stats <- tbl_summary(mtcars.final, by = transmission_manual,
                         include = c("kmpg", "hp", "wt", "cyl", "carb", "transmission_manual"),
                         statistic = list(all_continuous() ~ "{mean} ({sd})",
                                          all_categorical() ~ "{n} ({p}%)"),
                         label = list(kmpg ~ "Kilometres per gallon", hp ~ "Horsepower", wt ~ "Weight", cyl ~ "Cylinders", carb ~ "Carburetors")
                         ) %>%
  add_overall(last = TRUE) %>%
  modify_header(label ~ "**Characteristics**") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Manual transmission**")

sum_stats

#If outputting to pdf/ latex, might need to convert table to kable format as below to ensure it renders correctly
#sum_stats %>% as_kable_extra(format = "latex", booktabs = TRUE, longtable = TRUE)

```

# Data visualisations

To delve deeper into the distributions of fuel efficiency and horsepower, I plot their density curves in @fig-kmpg-density and @fig-hp-density respectively.

```{r}
#| label: Default-plot-themes

def_theme <- theme(plot.title = element_text(family = "serif", size = 15, hjust = 0.5),
                  axis.title = element_text(family = "serif", size = 13),
                  axis.text = element_text(family = "serif", size = 11),
                  strip.text.x = element_text(family = "serif", size = 12),
                  strip.text.y = element_text(family = "serif", size = 12, angle = 0),
                  legend.title = element_text(family = "serif", size = 12),
                  legend.text = element_text(family = "serif", size = 11))
```

```{r}
#| label: fig-kmpg-density
#| fig-cap: "**Distribution of fuel efficiency**"

# Density plot of km per gallon

kmpg_density <- ggplot(data = mtcars.final, aes(x = kmpg)) + 
  geom_density(color = "green", size = 1) + 
  labs(x = "Km per gallon", y = "Density") +
  def_theme

kmpg_density

```


```{r}
#| label: fig-hp-density
#| fig-cap: "**Distribution of horsepower**"

# Density plot of horsepower

hp_density <- ggplot(data = mtcars.final, aes(x = hp)) +
  geom_density(color = "blue", size = 1) +
  labs(x = "Horsepower", y = "Density") +
  def_theme

hp_density

```

Both distributions are single-peaked, and horsepower has a more left-skewed distribution. The peaks (modes) are also relatively close to their respective means and medians, where horsepower mean and median are `{r} round(mean(mtcars.final$hp), 2) ` and `{r} round(median(mtcars.final$hp), 2) ` and fuel efficiency mean and median are `{r} round(mean(mtcars.final$kmpg), 2) ` and `{r} round(median(mtcars.final$kmpg), 2) `. Horsepower shows greater difference between its mean, median, and mode, which is consistent with its less symmetric distribution.

Next, I look at the relationship between fuel efficiency and horsepower, both with and without controlling for weight.

```{r}
#| label: fig-kmpg-hp-scatterplot
#| fig-cap: "**Relationship between fuel efficiency and horsepower**"
#| fig-subcap:
#|   - Ungrouped
#|   - Grouped by weight

# Scatterplot of kmpg against hp

hp_kmpg_scatter <- ggplot(data = mtcars.final, aes(x = hp, y = kmpg)) +
  geom_point(color = "purple") +
  labs(x = "Horsepower", y = "Km per gallon") + 
  def_theme

hp_kmpg_scatter

# Group the scatterplots by weight categories

hp_kmpg_bywt_scatter <- ggplot(data = mtcars.final, aes(x = hp, y = kmpg)) +
  geom_point(aes(color = wt_category)) + 
  facet_wrap(. ~ wt_category) +
  labs(x = "Horsepower", y = "Km per gallon", color = "Weight category") +
  def_theme

hp_kmpg_bywt_scatter

```

Fuel efficiency is negatively correlated with horsepower, and after grouping by weight, we see a lower variability in the relationship for medium weight cars, with more of the variance coming from the heavy and light cars.

Finally, I want to see how fuel efficiency and horsepower varies with the number of cylinders and carburetors. I plot histograms as there are insufficient data points for certain combinations of cylinder and carburetor numbers to generate histograms.

```{r}
#| label: fig-kmpg-histograms-bycylcarb
#| fig-cap: "**Distribution of fuel efficiency by number of carburetors and cylinders**"
#| fig-asp: 1.2

# Histograms of kmpg grouped by no. of cyls and carbs

kmpg__bycylcarb_hist <- ggplot(data = mtcars.final, aes(x = kmpg)) +
  geom_histogram(binwidth = 1, aes(fill = factor(interaction(cyl, carb)))) +
  facet_grid(carb ~ cyl, labeller = label_both) +
  labs(x = "Km per gallon", y = "Number of cars", fill = "Number of cylinders and carburetors") +
  guides(fill = "none") +
  def_theme

kmpg__bycylcarb_hist
```

```{r}
#| label: fig-hp-histograms-bycylcarb
#| fig-cap: "**Distribution of horsepower by number of carburetors and cylinders**"
#| fig-asp: 1.2

# Histograms of hp grouped by no. of cyls and carbs

hp__bycylcarb_hist <- ggplot(data = mtcars.final, aes(x = hp)) +
  geom_histogram(binwidth = 5, aes(fill = factor(interaction(cyl, carb)))) +
  facet_grid(carb ~ cyl, labeller = label_both) +
  labs(x = "Horsepower", y = "Number of cars", fill = "Number of cylinders and carburetors") +
  guides(fill = "none") +
  def_theme

hp__bycylcarb_hist

```

@fig-kmpg-histograms-bycylcarb shows that holding the number of carburetors constant, fuel efficiency seems to decrease in the number of cylinders, while holding the number of cylinders constant, fuel efficiency seems relatively constant in the number of carburetors.

Conversely, @fig-hp-histograms-bycylcarb shows that horsepower increases in both the number of cylinders and the number of carburetors holding the other constant.

This suggests that the number of cylinders may be a confound in the relationship between horsepower and fuel efficiency since it is positively correlated with horsepower and negatively correlated with fuel efficiency, which would exaggerate the negative relationship between horsepower and fuel efficiency.

# Regression analysis

For a more formal analysis, I run a regression of fuel efficiency on horsepower controlling for other car characteristics. @fig-reg-table shows the results.

```{r}
#| label: Kmpg-on-hp-regression
 
# Regress kmpg on hp only

basic_reg <- lm_robust(kmpg ~ hp, mtcars.final)

basic_reg

# Regress kmpg on hp and other car characteristics

extended_reg <- lm_robust(kmpg ~ hp + wt + cyl + carb + transmission_manual, mtcars.final)

extended_reg

# Store the regressions

reg_models <- list(basic_reg, extended_reg)
```

<div style="text-align: center;">
::: {#fig-reg-table}
```{r}
#| label: reg-table
#| output: asis

#Set output to asis because texreg functions output the raw code so want to interpret it as markdown syntax

# Output the regressions to a table

reg_table <- htmlreg(reg_models, stars = c(0.01, 0.05, 0.1), digits = 2,
                     include.ci = FALSE,
                     custom.model.names = c("Basic model", "Extended model"),
                     custom.header = list("Kmpg" = 1:2),
                     caption = NULL)

reg_table

```

**Regression of fuel efficiency on horsepower**

:::

</div>

When horsepower is the *sole* regressor, it has a very statistically significant (<1%) negative correlation with fuel efficiency, where each additional horsepower unit is associated with `{r} round(coef(basic_reg)["hp"], 2) ` kilometres per gallon travelled. However, once we control for other car characteristics, this is no longer statistically significant at even 10%, showing the confounds we were worried about.

In fact, weight is the only factor which has a significant relationship with fuel efficiency, with a coefficient of `{r} round(coef(extended_reg)["wt"], 2) `. Fuel efficiency does not differ significantly across different number of cylinders or carburetors, nor between the two transmission types (automatic and manual). 

# Submission & Assessment

To submit:

1. Add & modify the `assessment.md` in this mini-project's directory:
    1. Check off all objectives you believe you have demonstrated
    2. Indicate which objectives you are meeting for the first time (if any)
    3. Complete any relevant open-ended items
2. Push your changes to your centralized assignment repository on GitHub. 
3. Confirm that Dr. Dowling and your section TA are added as collaborators to your repository.
4. Submit your work in your next open mini-project assignment by including the following information in the text box:
    1. The title of the assignment: "Level 1 Data Cleaning: Clean the mtcars Dataset"
    2. A link to the **directory** for this assignment in your centralized assignment repo


